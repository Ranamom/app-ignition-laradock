name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  build-php:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php_version: [ "7.4", "8.0", "8.1", "8.2" ]
        architecture: [ "linux/amd64", "linux/arm64" ]
        service: [ php-fpm, php-worker, workspace, laravel-horizon ]
    steps:
      - uses: actions/checkout@v4
      - name: Build the Docker image
        env:
          PHP_VERSION: ${{ matrix.php_version }}
        run: |
          set -eux
          cp .env.example .env
          sed -i -- 's/=false/=true/g' .env
          sed -i -- 's/CHANGE_SOURCE=true/CHANGE_SOURCE=false/g' .env
          sed -i -- 's/PHPDBG=true/PHPDBG=false/g' .env
          sed -i -- 's/CASSANDRA=true/CASSANDRA=false/g' .env
          sed -i -- 's/GEARMAN=true/GEARMAN=false/g' .env
          sed -i -- 's/AEROSPIKE=true/AEROSPIKE=false/g' .env
          sed -i -- 's/PHALCON=true/PHALCON=false/g' .env
          sed -i -- 's/RDKAFKA=true/RDKAFKA=false/g' .env
          sed -i -- 's/MAILPARSE=true/MAILPARSE=false/g' .env
          sed -i -- 's/OCI8=true/OCI8=false/g' .env
          sed -i -- 's/V8JS=true/V8JS=false/g' .env
          sed -i -- 's/AUDIOWAVEFORM=true/AUDIOWAVEFORM=false/g' .env
          sed -i -- 's/SSDB=true/SSDB=false/g' .env
          sed -i -- 's/ENCHANT=true/ENCHANT=false/g' .env
          sed -i -- 's/MSSQL=true/MSSQL=false/g' .env
          docker compose build ${{ matrix.service }}
          docker compose up -d --no-deps -- ${{ matrix.service }}
          docker compose exec -T -- ${{ matrix.service }} php -m
          docker compose down
        env:
          DOCKER_DEFAULT_PLATFORM: ${{ matrix.architecture }}
      - name: List Images
        run: docker image inspect --format "{{.ID}} {{.RepoTags}} {{.Architecture}}" $(docker image ls -q)

  build-other:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture: [ "linux/amd64", "linux/arm64" ]
        service: [ 'adminer', 'apache2', 'mailcatcher', 'mailhog', 'mysql', 'nginx', 'phpmyadmin', 'postgres', 'redis', 'redis-webui', 'seleniarm', 'selenium' ]
    steps:
      - uses: actions/checkout@v4
      - name: Build the Docker image
        run: |
          cp .env.example .env
          sed -i -- 's/=false/=true/g' .env
          sed -i -- 's/CHANGE_SOURCE=true/CHANGE_SOURCE=false/g' .env
          docker compose build ${{ matrix.service }}
        env:
          DOCKER_DEFAULT_PLATFORM: ${{ matrix.architecture }}
      - name: List Images
        run: docker image inspect --format "{{.ID}} {{.RepoTags}} {{.Architecture}}" $(docker image ls -q)
