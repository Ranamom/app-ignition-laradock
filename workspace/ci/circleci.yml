version: 2.1

jobs:
  ci:
    machine: # executor type
      image: ubuntu-2004:current

    parameters:
      app_path:
        type: string
      run_pint:
        type: boolean
        default: false
      run_phpstan:
        type: boolean
        default: false
      setup_mysql:
        type: boolean
        default: false
      setup_pgsql:
        type: boolean
        default: false
      run_dusk:
        type: boolean
        default: false
      code_coverage:
        type: boolean
        default: false
      use_nginx:
        type: boolean
        default: false
      web_server:
        type: string
        default: ''

    environment:
      APP_PATH: << parameters.app_path >>
      MIN_CODE_COVERAGE: {MIN_CODE_COVERAGE}
      HOST_NAME: {HOST_NAME}
      CONTAINERS: {CONTAINERS}
      MYSQL_PASSWORD: {MYSQL_PASSWORD}
      PGSQL_USER: {PGSQL_USER}
      PGSQL_PASSWORD: {PGSQL_PASSWORD}
      DB_NAME: {DATABASE_NAME}

    steps:
      - checkout:
          path: << parameters.app_path >>

      - run:
          name: Checkout Containers
          command: |
            git clone --depth 1 https://github.com/garrett9/app-ignition-laradock.git app-ignition-laradock

      - when:
          condition:
            equal: ['nginx', << parameters.web_server >>]
          steps:
            - run:
                name: Copy Nginx Config
                command: |
                  cd app-ignition-laradock/nginx/sites
                  cp app-ignition-laravel.conf.example $APP_PATH.conf
                  sed -i 's/{APP_DOMAIN}/'"$HOST_NAME"'/g' $APP_PATH.conf
                  sed -i 's/{APP_NAME}/'"$APP_PATH"'/g' $APP_PATH.conf

      - when:
          condition:
            equal: ['apache', << parameters.web_server >>]
          steps:
            - run:
                name: Copy Apache Config
                command: |
                  cd app-ignition-laradock/apache2/sites
                  cp app-ignition-laravel.conf.example $APP_PATH.conf
                  sed -i 's/{APP_DOMAIN}/'"$HOST_NAME"'/g' $APP_PATH.conf
                  sed -i 's/{APP_NAME}/'"$APP_PATH"'/g' $APP_PATH.conf

      - run:
          name: Build Containers
          command: |
            cd app-ignition-laradock
            cp ../$APP_PATH/.app-ignition/.env.app-ignition .env
            docker-compose build $CONTAINERS
            docker-compose up -d $CONTAINERS

      - run:
          name: Install Composer Dependencies
          command: |
            cd app-ignition-laradock
            docker-compose exec --user=root -w "/var/www/$APP_PATH" workspace composer install

      - when:
          condition:
            equal: [true, << parameters.run_pint >>]
          steps:
          - run:
              name: Run Pint
              command: |
                cd app-ignition-laradock
                docker-compose exec --user=root -w "/var/www/$APP_PATH" workspace ./vendor/bin/pint

          - run:
              name: Commit Pint Changes
              command: |
                cd $APP_PATH
                git config user.email "circleci@circleci.com"
                git config user.name "CircleCI"
                git add -A
                git commit -m "Fix styling" || true
                git push origin main || true

      - when:
          condition:
            equal: [true, << parameters.run_phpstan >>]
          steps:
          - run:
              name: Run PHPStan
              command: |
                cd app-ignition-laradock
                docker-compose exec --user=root -w "/var/www/$APP_PATH" workspace ./vendor/bin/phpstan analyze

      - when:
          condition:
            equal: [true, << parameters.setup_mysql >>]
          steps:
          - run:
              name: Setup MySQL Databases
              command: |
                cd app-ignition-laradock
                docker compose exec --user=root -w "/var/www/app-ignition-laradock" workspace mysql -h mysql -u root --password="$MYSQL_PASSWORD" -Bse "CREATE DATABASE IF NOT EXISTS $DB_NAME COLLATE 'utf8_general_ci';"
                docker compose exec --user=root -w "/var/www/app-ignition-laradock" workspace mysql -h mysql -u root --password="$MYSQL_PASSWORD" -Bse "CREATE DATABASE IF NOT EXISTS ${DB_NAME}_test COLLATE 'utf8_general_ci';"
                docker compose exec --user=root -w "/var/www/app-ignition-laradock" workspace mysql -h mysql -u root --password="$MYSQL_PASSWORD" -Bse "CREATE DATABASE IF NOT EXISTS ${DB_NAME}_dusk COLLATE 'utf8_general_ci';"

      - when:
          condition:
            equal: [true, << parameters.setup_pgsql >>]
          steps:
          - run:
              name: Setup PostgreSQL Databases
              command: |
                cd app-ignition-laradock
                docker compose exec -e PGPASSWORD=$PGSQL_PASSWORD --user=root workspace psql -h postgres -U $PGSQL_USER -c "CREATE DATABASE $DB_NAME;"
                docker compose exec -e PGPASSWORD=$PGSQL_PASSWORD --user=root workspace psql -h postgres -U $PGSQL_USER -c "CREATE DATABASE ${DB_NAME}_test;"
                docker compose exec -e PGPASSWORD=$PGSQL_PASSWORD --user=root workspace psql -h postgres -U $PGSQL_USER -c "CREATE DATABASE ${DB_NAME}_dusk;"

      - run:
         name: Install NPM Dependencies
         command: |
           cd app-ignition-laradock
           docker-compose exec --user=root -w "/var/www/$APP_PATH" workspace npm ci
           docker-compose exec --user=root -w "/var/www/$APP_PATH" workspace npm run build

      - when:
          condition:
            equal: [false, << parameters.code_coverage >>]
          steps:
          - run:
              name: Run Feature & Unit Tests
              command: |
                cd app-ignition-laradock
                docker-compose exec --user=root -w "/var/www/$APP_PATH" workspace php artisan test

      - when:
          condition:
            equal: [true, << parameters.code_coverage >>]
          steps:
          - run:
              name: Run Feature & Unit Tests with Coverage
              command: |
                cd app-ignition-laradock
                docker-compose exec --user=root -w "/var/www/$APP_PATH" workspace php artisan test --coverage --min=$MIN_CODE_COVERAGE

      - when:
          condition:
            equal: [true, << parameters.run_dusk >>]
          steps:
          - run:
              name: Add hosts to /etc/hosts
              command: |
                sudo echo "127.0.0.1 $HOST_NAME" | sudo tee -a /etc/hosts

          - run:
              name: Configure Initial Env for Dusk
              command: |
                echo "APP_ENV=local" | tee -a $APP_PATH/.env

          - run:
              name: Run Dusk Tests
              command: |
                cd app-ignition-laradock
                docker compose exec --user=root -w "/var/www/$APP_PATH" workspace php artisan dusk --without-tty

          - store_artifacts:
              path: $APP_PATH$/tests/Browser/screenshots
              destination: screenshots

workflows:
  version: 2.2.0
  ci_workflow:
    jobs:
      - ci:
          app_path: {APP_PATH}
          run_pint: {RUN_PINT}
          run_phpstan: {RUN_PHPSTAN}
          setup_mysql: {SETUP_MYSQL}
          run_dusk: {RUN_DUSK}
          code_coverage: {CODE_COVERAGE}
          setup_pgsql: {SETUP_PGSQL}
          web_server: {WEB_SERVER}
